using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public class VirtualObjectContainer : MonoBehaviour
{
    public VirtualObjectSet virtualObjects;
    public ZoneVariable activeZone;
    public GameObject virtualObjectPrefab;
    public GameObject zoneLoadedPrefab;
    //time for pop up to display on screen before disapperaing in seconds
    public float zoneIndicatorDelay = 2.0f;
    public ZoneOrigins zoneOrigins;
    public GameObject zoneCompletedPrefab;
    public GameObject categoryCompletedPrefab;
    public GameObject huntCompletedPrefab;

    // Dictionary of zones, accessible by their corresponding zone names
    private readonly Dictionary<ZoneNames, GameObject> zones = new Dictionary<ZoneNames, GameObject>();

    //variables used to keep state of the zone loaded indiactor
    private ZoneNames lastActiveZone = ZoneNames.None;
    private bool zoneChanged = false;
    private GameObject zoneLoadIndicator;
    private GameObject zoneCompletedPopUp;
    private GameObject categoryCompletedPopUp;
    private GameObject huntCompletedPopUp;

    //ensures we dont start a second coroutine if one is already running to show the indicator
    private bool isLoadIndicatorOnScreen = false;
    private Canvas sceneCanvas;


    // Start is called before the first frame update
    void Start()
    {
        Debug.Log("Sean/Tyler - Start of Start: count of Virtual Items in UpdateCount: " + virtualObjects.Items.Count);
        // Create zones
        foreach (ZoneNames zone in Enum.GetValues(typeof(ZoneNames)))
        {
            var zoneObject = new GameObject(zone.ToString());
            zoneObject.transform.SetParent(transform, false);
            zones.Add(zone, zoneObject);
            Debug.Log($"BLE - created zone with name: {zone}");
        }

        Instantiate2DPanels();
        
        DeactivteZones();
        virtualObjects.InitializeFoundCounts();
        Debug.Log("Sean/Tyler - End of Start: count of Virtual Items in UpdateCount: " + virtualObjects.Items.Count);
        //TODO may need to reset hunt completed pop up

    }
    private void Instantiate2DPanels()
    {
        //Find a canvas to put the indicator on, we don't care which canvas
        sceneCanvas = FindObjectOfType<Canvas>();
        zoneLoadIndicator = Instantiate(zoneLoadedPrefab, sceneCanvas.transform, false);
        zoneLoadIndicator.SetActive(false);
        zoneCompletedPopUp = Instantiate(zoneCompletedPrefab, sceneCanvas.transform, false);
        zoneCompletedPopUp.SetActive(false);
        categoryCompletedPopUp = Instantiate(categoryCompletedPrefab, sceneCanvas.transform, false);
        categoryCompletedPopUp.SetActive(false);
        huntCompletedPopUp = Instantiate(huntCompletedPrefab, sceneCanvas.transform, false);
        huntCompletedPopUp.SetActive(false);
    }

    private void Update()
    {
        // If zone is active
        if(activeZone.Value != ZoneNames.None)
        {
            //did we change zones or is this the first time we activated a zone
            zoneChanged = activeZone.Value != lastActiveZone;

            //If the zone changed, notify the user and load it
            if(zoneChanged & !isLoadIndicatorOnScreen)
            {
                StartCoroutine(ToggleLoadIndicator(activeZone.Value));
                Debug.Log("---Showed Indicator");
                SetZoneOrigin(activeZone.Value);
                Debug.Log("---Set origin done");
            }
            //keep track of the zone we are in for the next tick
            lastActiveZone = activeZone.Value;

        }
        else
        {
            // Otherwise de-activate inactive zone objects
            DeactivteZones();
        }
    }

    private void SetZoneOrigin(ZoneNames zone)
    { 
        DeactivteZones();
        Debug.Log("---Deactivated");

        //Determine which zone needs to be updated in world space
        zones[zone].transform.position = zoneOrigins.Dictionary[zone].position;
        Debug.Log("---zone transform set");

        //only instantiate if zone is not already instatiated
        if (zones[zone].transform.childCount <= 0)
        {
            InstantiateObjectsInZone(zone);
            Debug.Log("---Instantiated Zone");
        }
        zones[zone].SetActive(true);
    }

    private void InstantiateObjectsInZone(ZoneNames zone)
    {
        Debug.Log("In instantiate objects in zone ()");
        Debug.Log("count of virtual objects: " + virtualObjects.Items.Count);
        foreach (var virtualObjectData in virtualObjects.Items)
        {
            if (virtualObjectData.zoneName == zone)
            {                
                var virtualObject = Instantiate(virtualObjectPrefab, zones[virtualObjectData.zoneName].transform, false);
                var actor = virtualObject.GetComponent<VirtualObjectActor>();
                actor.Init(virtualObjectData.name, virtualObjectData);
            }
        }
    }

    private void DeactivteZones()
    {
        foreach (var zone in zones)
        {
            zone.Value.SetActive(false);
        }
    }

    //Nicely prints transforms, helpful for debugging
    private void PrintTransform(string leadingText, Transform t)
    {
        Debug.Log(leadingText + " (" + t.position.x + ", " + t.position.y + ", " + t.position.z + ")");
    }

    /// <summary>
    /// Count how many objects are in each zone and include it on the popup when the zone image is scanned
    /// </summary> 
    private IEnumerator ToggleLoadIndicator(ZoneNames zoneName)
    {
        int countObjectsInZone = virtualObjects.Items.Where(vo => vo.zoneName == zoneName).Count();
        isLoadIndicatorOnScreen = true;
        zoneLoadIndicator.SetActive(true);
        zoneLoadIndicator.GetComponent<ZoneLoadedIndicatorActor>().SetText(zoneName.ToDescription() +
            "\n\n This zone has " + countObjectsInZone + " objects in it.");
        yield return new WaitForSeconds(zoneIndicatorDelay);
        zoneLoadIndicator.SetActive(false);
        isLoadIndicatorOnScreen = false;
    }

    /// <summary>
    /// The event handler to call whenever a new object is found to signal updating counts
    /// </summary>
    public void OnFoundObject()
    {
        Debug.Log("Sean/Tyler - OnFoundObject was called");
        virtualObjects.UpdateFoundCounts();
        virtualObjects.CheckFoundCounts();
    }

    public void ZoneCompleted()
    {
        StartCoroutine(ToggleZoneCompletedPopUp());  
    }

    private IEnumerator ToggleZoneCompletedPopUp()
    {
        zoneCompletedPopUp.SetActive(true);
        zoneCompletedPopUp.GetComponent<ZoneCompletedPopUpActor>().UserCompletedZone(activeZone.Value);
        yield return new WaitForSeconds(zoneIndicatorDelay+5);
        zoneCompletedPopUp.SetActive(false);
    }

    public void HuntCompleted()
    {       
        huntCompletedPopUp.SetActive(true);
    }

    public void SensorCategoryCompleted()
    {
        ToggleCategoryPopUp(CategoryNames.Sensors);
    }

    public void AppAndSoftwareCategoryCompleted()
    {
        ToggleCategoryPopUp(CategoryNames.AppAndSoftware);
    }

    public void SustainabilityCategoryComplete()
    {
        ToggleCategoryPopUp(CategoryNames.SustainabilityAndFarming);
    }

    public void SystemsCategoryCompleted()
    {
        ToggleCategoryPopUp(CategoryNames.Systems);
    }

    private IEnumerator ToggleCategoryPopUp(CategoryNames category)
    {
        categoryCompletedPopUp.SetActive(true);
        categoryCompletedPopUp.GetComponent<CategoryFoundActor>().SetCategory(category);
        yield return new WaitForSeconds(zoneIndicatorDelay+5);
        categoryCompletedPopUp.SetActive(false);
    }
    
}
